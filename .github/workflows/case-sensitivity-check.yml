name: Case Sensitivity Check

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      auto_fix:
        description: 'Automatically fix case conflicts'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  check-case-sensitivity:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config core.ignorecase false

    - name: Check for case conflicts
      id: check_conflicts
      run: |
        echo "üîç Checking for case sensitivity conflicts..."
        
        # Find potential case conflicts
        CONFLICTS=$(git ls-files | sort -f | uniq -i -d)
        
        if [ -n "$CONFLICTS" ]; then
          echo "‚ö†Ô∏è Case conflicts detected:"
          echo "$CONFLICTS"
          echo "conflicts_found=true" >> $GITHUB_OUTPUT
          echo "conflicts<<EOF" >> $GITHUB_OUTPUT
          echo "$CONFLICTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ No case conflicts found"
          echo "conflicts_found=false" >> $GITHUB_OUTPUT
        fi

    - name: Auto-fix conflicts (default behavior)
      if: steps.check_conflicts.outputs.conflicts_found == 'true' && (github.event.inputs.auto_fix != 'false')
      run: |
        echo "üîß Auto-fixing case conflicts using PascalCase convention..."
        
        # Create Python script for smart conflict resolution
        cat > fix_conflicts.py << 'EOF'
        import os
        import sys
        import subprocess
        import re
        from pathlib import Path
        
        def run_git_command(cmd):
            """Run git command and return output"""
            try:
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                return result.returncode == 0, result.stdout.strip(), result.stderr.strip()
            except Exception as e:
                return False, "", str(e)
        
        def pascal_case(text):
            """Convert text to PascalCase with smart rules"""
            # Handle special cases for your project
            special_cases = {
                'ponderjs': 'PonderJs',
                'kubejs': 'KubeJS',
                'javascript': 'JavaScript',
                'typescript': 'TypeScript',
                'example': 'Example',
                'examples': 'Examples'
            }
            
            text_lower = text.lower()
            if text_lower in special_cases:
                return special_cases[text_lower]
            
            # General PascalCase conversion
            return ''.join(word.capitalize() for word in re.split(r'[-_\s]+', text))
        
        def apply_pascal_case_to_path(path):
            """Apply PascalCase to directory names in path"""
            parts = Path(path).parts
            new_parts = []
            
            for part in parts:
                if '.' in part:  # It's a file
                    name, ext = os.path.splitext(part)
                    new_part = pascal_case(name) + ext
                else:  # It's a directory
                    new_part = pascal_case(part)
                new_parts.append(new_part)
            
            return str(Path(*new_parts))
        
        def main():
            # Get all tracked files
            success, files_output, _ = run_git_command("git ls-files")
            if not success:
                print("‚ùå Failed to get git files")
                sys.exit(1)
            
            files = files_output.split('\n') if files_output else []
            
            # Group files by lowercase version to find conflicts
            file_groups = {}
            for file in files:
                if file:
                    key = file.lower()
                    if key not in file_groups:
                        file_groups[key] = []
                    file_groups[key].append(file)
            
            # Find conflicts
            conflicts = {group[0]: group for group in file_groups.values() if len(group) > 1}
            
            if not conflicts:
                print("‚úÖ No case conflicts found!")
                return
            
            print("üîß Fixing conflicts using PascalCase convention...")
            
            # Process each conflict group
            for target_key, conflict_files in conflicts.items():
                print(f"\nüìÅ Processing conflict group: {conflict_files}")
                
                # Determine the target name using PascalCase
                target_name = apply_pascal_case_to_path(conflict_files[0])
                
                # Find which file (if any) already matches the target
                files_to_remove = []
                target_file = None
                
                for file in conflict_files:
                    if file == target_name:
                        target_file = file
                        print(f"  ‚úÖ Keeping: {file}")
                    else:
                        files_to_remove.append(file)
                        print(f"  üóëÔ∏è  Will remove: {file}")
                
                # If no file matches target name, rename the first one
                if not target_file and files_to_remove:
                    file_to_rename = files_to_remove.pop(0)
                    print(f"  üîÑ Renaming: {file_to_rename} -> {target_name}")
                    
                    # Git mv with intermediate step for case-only renames
                    temp_name = file_to_rename + ".tmp"
                    success1, _, _ = run_git_command(f'git mv "{file_to_rename}" "{temp_name}"')
                    success2, _, _ = run_git_command(f'git mv "{temp_name}" "{target_name}"')
                    
                    if not (success1 and success2):
                        print(f"  ‚ö†Ô∏è  Failed to rename {file_to_rename}")
                
                # Remove duplicate files
                for file in files_to_remove:
                    print(f"  üóëÔ∏è  Removing duplicate: {file}")
                    success, _, _ = run_git_command(f'git rm "{file}"')
                    if not success:
                        print(f"  ‚ö†Ô∏è  Failed to remove {file}")
            
            print("\n‚úÖ Case conflicts resolved!")
        
        if __name__ == "__main__":
            main()
        EOF
        
        # Run the Python script
        python3 fix_conflicts.py

    - name: Commit and push fixes
      if: steps.check_conflicts.outputs.conflicts_found == 'true' && (github.event.inputs.auto_fix != 'false')
      run: |
        # Check if there are changes to commit
        if ! git diff --quiet || ! git diff --cached --quiet; then
          echo "üìù Committing case sensitivity fixes..."
          
          git add -A
          git commit -m "üîß Auto-fix case sensitivity conflicts
          
          - Applied PascalCase naming convention
          - Resolved conflicts that could cause issues on case-insensitive filesystems
          - Removed duplicate files that differ only in case
          - Auto-generated by GitHub Actions"
          
          git push origin ${{ github.ref_name }}
          echo "‚úÖ Case conflicts fixed and pushed automatically!"
        else
          echo "‚ÑπÔ∏è No changes to commit"
        fi

    - name: Comment on PR (if conflicts were found and fixed)
      if: steps.check_conflicts.outputs.conflicts_found == 'true' && github.event_name == 'pull_request' && (github.event.inputs.auto_fix != 'false')
      uses: actions/github-script@v7
      with:
        script: |
          const body = `## ‚úÖ Case Sensitivity Conflicts Auto-Fixed
          
          This PR had case sensitivity conflicts that have been automatically resolved:
          
          **Actions taken:**
          - Applied PascalCase naming convention
          - Removed duplicate files that differ only in case
          - Ensured compatibility across all operating systems
          
          The conflicts have been fixed and committed automatically. Please review the changes.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Report conflicts (if auto-fix is disabled)
      if: steps.check_conflicts.outputs.conflicts_found == 'true' && github.event.inputs.auto_fix == 'false'
      run: |
        echo "‚ö†Ô∏è Case sensitivity conflicts detected but auto-fix is disabled!"
        echo "Conflicts found:"
        echo "${{ steps.check_conflicts.outputs.conflicts }}"
        echo ""
        echo "To fix automatically, run this workflow manually with auto_fix set to 'true'"
        exit 1

    - name: Success message
      if: steps.check_conflicts.outputs.conflicts_found == 'false'
      run: |
        echo "üéâ No case sensitivity conflicts found! Repository is clean." 