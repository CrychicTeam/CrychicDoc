import { SidebarItem } from '../types';
// Removed: import { generatePathKey } from './pathKeyGenerator'; // Not directly used here, key should be on item

/**
 * Sorts an array of SidebarItems based on the provided itemOrder 
 * (Record<string, number>) and then alphanumerically for unlisted items.
 *
 * @param itemsToSort The array of SidebarItems to sort. Each item is expected to have
 *              a `_relativePathKey` (for files/dirs, generated by pathKeyGenerator) or its `text` 
 *              (for groups that are ordered by title) that can be used for matching against itemOrderConfig.
 * @param itemOrderConfig A Record where keys are item identifiers (relativePathKey or group title)
 *                        and values are their desired order. Defaults to an empty object.
 * @returns A new array of sorted SidebarItems.
 */
export function sortItems(
    itemsToSort: SidebarItem[], 
    itemOrderConfig: Record<string, number> = {}
): SidebarItem[] {
    const itemsWithSortInfo = itemsToSort.map(item => {
        const orderKey = item._relativePathKey || item.text; // Groups might be keyed by their title
        const order = (orderKey && itemOrderConfig.hasOwnProperty(orderKey)) 
                        ? itemOrderConfig[orderKey] 
                        : Number.MAX_SAFE_INTEGER; // Default for items not in itemOrder
        return { item, order, originalText: item.text || orderKey || '' }; // originalText for stable alphanumeric sort
    });

    itemsWithSortInfo.sort((a, b) => {
        if (a.order !== b.order) {
            return a.order - b.order; // Primary sort by explicit order
        }
        // Secondary sort alphanumerically by text/key for items with same order or not in itemOrder
        return a.originalText.localeCompare(b.originalText);
    });

    return itemsWithSortInfo.map(wrappedItem => wrappedItem.item);
} 


